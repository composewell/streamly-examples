version: 2.1

#-----------------------------------------------------------------------------
# packcheck-0.4.2
# Packcheck global environment variables
#-----------------------------------------------------------------------------

env: &env
    environment:
      # ------------------------------------------------------------------------
      # Common options
      # ------------------------------------------------------------------------
      # GHC_OPTIONS: "-Werror"
      CABAL_REINIT_CONFIG: "y"
      LC_ALL: "C.UTF-8"

      # ------------------------------------------------------------------------
      # What to build
      # ------------------------------------------------------------------------
      DISABLE_TEST: "y"
      DISABLE_BENCH: "y"
      DISABLE_DOCS: "y"
      DISABLE_SDIST_BUILD: "yes"
      DISABLE_DIST_CHECKS: "yes"

      # ------------------------------------------------------------------------
      # stack options
      # ------------------------------------------------------------------------
      # Note requiring a specific version of stack using STACKVER may fail due to
      # github API limit while checking and upgrading/downgrading to the specific
      # version.
      #STACKVER: "1.6.5"
      STACK_UPGRADE: "y"
      #RESOLVER: "lts-12"

      # ------------------------------------------------------------------------
      # cabal options
      # ------------------------------------------------------------------------
      CABAL_CHECK_RELAX: "y"
      CABAL_NO_SANDBOX: "y"

      # ------------------------------------------------------------------------
      # Where to find the required tools
      # ------------------------------------------------------------------------
      PATH: /sbin:/usr/sbin:/bin:/usr/bin
      #TOOLS_DIR: /opt

      # ------------------------------------------------------------------------
      # Location of packcheck.sh (the shell script invoked to perform CI tests ).
      # ------------------------------------------------------------------------
      # You can either commit the packcheck.sh script at this path in your repo or
      # you can use it by specifying the PACKCHECK_REPO_URL option below in which
      # case it will be automatically copied from the packcheck repo to this path
      # during CI tests. In any case it is finally invoked from this path.
      PACKCHECK: "./packcheck.sh"
      # If you have not committed packcheck.sh in your repo at PACKCHECK
      # then it is automatically pulled from this URL.
      PACKCHECK_GITHUB_URL: "https://raw.githubusercontent.com/composewell/packcheck"
      PACKCHECK_GITHUB_COMMIT: "a68b7b9c7c21eef8ed273e67030efb1d4fec027c"

# image is a tag from docker registery
executors:
  amd64-executor:
    docker:
      - image: ubuntu:latest
  x86-executor:
    docker:
      - image: i386/ubuntu:eoan

#-----------------------------------------------------------------------------
# Common utility stuff, not to be modified usually
#-----------------------------------------------------------------------------

preinstall: &preinstall
  command: |
        apt-get update
        # required for https/cache save and restore
        apt-get install -y ca-certificates

        # required to (re)generate the configure script
        apt-get install -y autoconf

        # required for outbound https for stack and for stack setup
        apt-get install -y netbase xz-utils make

        # If a custom stack-yaml is specified, replace the default with that
        if test -e "$STACK_YAML"; then rm -f stack.yaml && ln -sv $STACK_YAML stack.yaml; else true; fi
        unset STACK_YAML

        # Get packcheck if needed
        apt-get install -y curl
        CURL=$(which curl)
        PACKCHECK_URL=${PACKCHECK_GITHUB_URL}/${PACKCHECK_GITHUB_COMMIT}/packcheck.sh
        if test ! -e "$PACKCHECK"; then $CURL -sL -o "$PACKCHECK" $PACKCHECK_URL; fi;
        chmod +x $PACKCHECK

        # Determine GHCUP_ARCH
        os=$(uname -s -m)
        case "$os" in
          "Linux x86_64") GHCUP_ARCH="x86_64-linux" ;;
          "Darwin x86_64") GHCUP_ARCH="x86_64-apple-darwin" ;;
          *) echo "Unknown OS/Arch: $os"; exit 1;;
        esac

        # Check available versions here: https://downloads.haskell.org/~ghcup/
        GHCUP_VER=0.1.20.0
        $CURL -sL -o ./ghcup https://downloads.haskell.org/~ghcup/$GHCUP_VER/${GHCUP_ARCH}-ghcup-$GHCUP_VER
        chmod +x ./ghcup
        apt-get install -y gcc
        apt-get install -y g++
        apt-get install -y libtinfo-dev
        ./ghcup install ghc $GHCVER
        ./ghcup set ghc $GHCVER
        ./ghcup install cabal $CABALVER
        ./ghcup set cabal $CABALVER
        # Required by cabal
        apt-get install -y git
        # libgmp required by ghc for linking
        apt-get install -y libgmp-dev
        # For sdl build flag
        apt-get install -y libsdl2-dev
        PATH=$HOME/.ghcup/bin:$PATH
        export PATH
        bash -c "$PACKCHECK $BUILD"

restore: &restore
  # Needs to happen after installing ca-certificates
  restore_cache:
    key: v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}

save: &save
  save_cache:
      key: v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
      paths:
        - ~/.cabal
        - ~/.ghc
        - ~/.local
        - ~/.stack
        # add .ghcup?

#-----------------------------------------------------------------------------
# Build matrix
#-----------------------------------------------------------------------------

jobs:
  cabal-ghc-9_8_1_Werror:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - run:
           name: GHC 9.8.1 + fusion-plugin + Werror
           environment:
             BUILD: "cabal-v2"
             CABAL_PROJECT: "cabal.project.ci"
             CABAL_BUILD_OPTIONS: "--flag fusion-plugin"
             CABALVER: "3.10.2.0"
             GHCVER: "9.8.1"
           <<: *preinstall
        - *save
  cabal-ghc-9_6_3_all_flags:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - run:
           name: GHC 9.6.3 + sdl2 + interop + fusion-plugin
           environment:
             BUILD: "cabal-v2"
             CABAL_PROJECT: "cabal.project.user"
             CABAL_BUILD_OPTIONS: "--flag sdl2 --flag interop --flag fusion-plugin"
             CABALVER: "3.10.2.0"
             GHCVER: "9.6.3"
           <<: *preinstall
        - *save
# Fails with this error:
# withBinaryFile: invalid argument (Symbolic link loop)
#  stack-ghc-9_6_3:
#      <<: *env
#      executor: amd64-executor
#      steps:
#        - checkout
#        - *restore
#        - run:
#            name: stack nightly-2023-12-14
#            environment:
#              BUILD: "stack"
#              RESOLVER: "nightly-2023-12-14"
#              STACK_YAML: "stack.yaml"
#              SDIST_OPTIONS: "--ignore-check"
#            <<: *preinstall
#        - *save
  cabal-ghc-9_0_1_sdist:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - run:
           name: GHC 9.0.1 + sdist + fusion-plugin
           environment:
             BUILD: "cabal-v2"
             CABAL_PROJECT: "cabal.project.user"
             CABAL_BUILD_OPTIONS: "--flag fusion-plugin"
             DISABLE_SDIST_BUILD: "no"
             CABALVER: "3.10.2.0"
             GHCVER: "9.0.1"
           <<: *preinstall
        - *save
  cabal-ghc-8_6_5:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
          #- *restore
        - run:
           name: GHC 8.6.5
           environment:
             BUILD: "cabal-v2"
             CABAL_PROJECT: "cabal.project.user"
             CABALVER: "3.10.2.0"
             GHCVER: "8.6.5"
           <<: *preinstall
           #no_output_timeout: 25m
        - *save
  hlint:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - run:
            name: Hlint examples
            environment:
              BUILD: hlint
              HLINT_OPTIONS: lint
              HLINT_TARGETS: examples
            <<: *preinstall
        - *save

workflows:
  version: 2
  build:
    jobs:
      - cabal-ghc-9_8_1_Werror
      - cabal-ghc-9_6_3_all_flags
      #- stack-ghc-9_6_3
      - cabal-ghc-9_0_1_sdist
      - cabal-ghc-8_6_5
      - hlint

version: 2.1

#-----------------------------------------------------------------------------
# packcheck-0.7.0
# Packcheck global environment variables
#-----------------------------------------------------------------------------

env: &env
    environment:
      # ------------------------------------------------------------------------
      # Common options
      # ------------------------------------------------------------------------
      # GHC_OPTIONS: "-Werror"
      GHCUPVER: 0.1.20.0
      CABAL_REINIT_CONFIG: "y"
      LC_ALL: "C.UTF-8"

      # ------------------------------------------------------------------------
      # What to build
      # ------------------------------------------------------------------------
      DISABLE_TEST: "y"
      DISABLE_BENCH: "y"
      DISABLE_DOCS: "y"
      DISABLE_SDIST_BUILD: "yes"
      DISABLE_DIST_CHECKS: "yes"

      # ------------------------------------------------------------------------
      # stack options
      # ------------------------------------------------------------------------
      # Note requiring a specific version of stack using STACKVER may fail due to
      # github API limit while checking and upgrading/downgrading to the specific
      # version.
      #STACKVER: "1.6.5"
      STACK_UPGRADE: "y"
      #RESOLVER: "lts-12"

      # ------------------------------------------------------------------------
      # cabal options
      # ------------------------------------------------------------------------
      CABAL_CHECK_RELAX: "y"
      CABAL_NO_SANDBOX: "y"

      # ------------------------------------------------------------------------
      # Where to find the required tools
      # ------------------------------------------------------------------------
      PATH: /sbin:/usr/sbin:/bin:/usr/bin
      #TOOLS_DIR: /opt

      # ------------------------------------------------------------------------
      # Location of packcheck.sh (the shell script invoked to perform CI tests ).
      # ------------------------------------------------------------------------
      # You can either commit the packcheck.sh script at this path in your repo or
      # you can use it by specifying the PACKCHECK_REPO_URL option below in which
      # case it will be automatically copied from the packcheck repo to this path
      # during CI tests. In any case it is finally invoked from this path.
      PACKCHECK: "./packcheck.sh"
      # If you have not committed packcheck.sh in your repo at PACKCHECK
      # then it is automatically pulled from this URL.
      PACKCHECK_GITHUB_URL: "https://raw.githubusercontent.com/composewell/packcheck"
      PACKCHECK_GITHUB_COMMIT: "101c73b53473ddfb763d65058b80123991cfeb4f"

# image is a tag from docker registery
executors:
  amd64-executor:
    docker:
      - image: ubuntu:latest
  x86-executor:
    docker:
      - image: i386/ubuntu:eoan

#-----------------------------------------------------------------------------
# Common utility stuff, not to be modified usually
#-----------------------------------------------------------------------------

preinstall: &preinstall
  run: |
        apt-get update
        # For sdl build flag
        apt-get install -y libsdl2-dev

        # required for https/cache save and restore
        apt-get install -y ca-certificates

        # NOTE: depends on specific debian version in the deb line below
        # For ghc and cabal-install packages from haskell.org
        # gnupg is required for apt-key to work
        #apt-get install -y gnupg
        #apt-key adv --keyserver keyserver.ubuntu.com  --recv-keys BA3CBA3FFE22B574
        #echo "deb http://downloads.haskell.org/debian buster main" >> /etc/apt/sources.list
        #apt-get update

        # required for outbound https for stack and for stack setup
        apt-get install -y netbase xz-utils make
        apt-get install -y zlib1g-dev

        # For ghcup to install ghc
        if test -n "$GHCUPVER"
        then
          apt-get install -y gcc
          apt-get install -y g++
        fi

        # libgmp required by ghc for linking
        apt-get install -y libgmp-dev
        apt-get install -y libtinfo-dev

        # Required by cabal when git URL is specified in project file
        apt-get install -y git

        # Required for and by packcheck
        apt-get install -y curl

        # Get packcheck if needed
        if test ! -e "$PACKCHECK"
        then
          if test -z "$PACKCHECK_GITHUB_COMMIT"
          then
              die "PACKCHECK_GITHUB_COMMIT is not specified."
          fi
          CURL=$(which curl)
          PACKCHECK_URL=${PACKCHECK_GITHUB_URL}/${PACKCHECK_GITHUB_COMMIT}/packcheck.sh
          $CURL -sL -o "$PACKCHECK" $PACKCHECK_URL
          chmod +x $PACKCHECK
        elif test ! -x "$PACKCHECK"
        then
            chmod +x $PACKCHECK
        fi

restore: &restore
  # Needs to happen after installing ca-certificates
  restore_cache:
    key: v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}

save: &save
  save_cache:
      key: v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
      paths:
        - ~/.cabal
        - ~/.ghc
        - ~/.local
        - ~/.stack
        - ~/.ghcup

#-----------------------------------------------------------------------------
# Build matrix
#-----------------------------------------------------------------------------

jobs:
  cabal-ghc-9_8_1_Werror:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - *preinstall
        - run:
           name: GHC 9.8.1 + fusion-plugin + Werror
           environment:
             CABAL_PROJECT: "cabal.project.ci"
             CABAL_BUILD_OPTIONS: "--flag fusion-plugin"
             CABALVER: "3.10.2.0"
             GHCVER: "9.8.1"
           command: |
              bash -c "$PACKCHECK cabal"
        - *save
  cabal-ghc-9_6_3_all_flags:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - *preinstall
        - run:
           name: GHC 9.6.3 + sdl2 + interop + fusion-plugin
           environment:
             CABAL_PROJECT: "cabal.project.user"
             CABAL_BUILD_OPTIONS: "--flag sdl2 --flag interop --flag fusion-plugin"
             CABALVER: "3.10.2.0"
             GHCVER: "9.6.3"
           command: |
              bash -c "$PACKCHECK cabal"
        - *save
# Fails with this error:
# withBinaryFile: invalid argument (Symbolic link loop)
  stack-ghc-9_6_3:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - *preinstall
        - run:
           name: stack nightly-2023-12-14
           environment:
             RESOLVER: "nightly-2023-12-14"
             STACK_YAML: "stack.yaml"
             DISABLE_SDIST_BUILD: "y"
             #SDIST_OPTIONS: "--ignore-check"
           command: |
             bash -c "$PACKCHECK stack"
        - *save
  cabal-ghc-9_0_1_sdist:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - *preinstall
        - run:
           name: GHC 9.0.1 + sdist + fusion-plugin
           environment:
             CABAL_PROJECT: "cabal.project.user"
             CABAL_BUILD_OPTIONS: "--flag fusion-plugin"
             DISABLE_SDIST_BUILD: "no"
             CABALVER: "3.10.2.0"
             GHCVER: "9.0.1"
           command: |
              bash -c "$PACKCHECK cabal"
        - *save
  cabal-ghc-8_6_5:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - *preinstall
        - run:
           name: GHC 8.6.5
           environment:
             CABAL_PROJECT: "cabal.project.user"
             CABALVER: "3.10.2.0"
             GHCVER: "8.6.5"
           command: |
              bash -c "$PACKCHECK cabal"
           #no_output_timeout: 25m
        - *save
  hlint:
      <<: *env
      executor: amd64-executor
      steps:
        - checkout
        - *restore
        - *preinstall
        - run:
           name: Hlint examples
           environment:
             HLINTVER: 3.6.1
             HLINT_OPTIONS: lint
             HLINT_TARGETS: examples
           command: |
              bash -c "$PACKCHECK hlint"
        - *save

workflows:
  version: 2
  build:
    jobs:
      - cabal-ghc-9_8_1_Werror
      - cabal-ghc-9_6_3_all_flags
      - stack-ghc-9_6_3
      - cabal-ghc-9_0_1_sdist
      - cabal-ghc-8_6_5
      - hlint
